1. Reverse Vowels of a String (#345)
2. Intersection of Two Arrays (#349)
3. Intersection of Two Arrays II (#350)
4. Vliad Perfect Square (#367)
5. Guess Numebr Higher or Lower (#374)
6. Ransome Note (#383)




Jane:



Suki:
1. 将s转化为list，vowels放进list里面，双指针遍历s中每个元素，是vowel的左右元素交换位置。
while i<j and s[i].lower() not in vowels:i +=1
while j>i and s[j].lower() not in vowels:j -=1

2.
method1: 判断nums的长度，以短长度为遍历条件。nums1 in nums2, set().add.
method2: set [x for x in set1 if x in set2]
method3: 将nums1和nums2排序，从小到大比较数字大小
method4: hash表随便存nums1或者nums2, 遍历数组然后比较是否在hash里面

3.
method1: hash表存储短的nums每个元素出现的次数，遍历长的数组去比较hash表，每找到一次hash表就-1.
method2: 排序后遍历nums1和nums2，寻找相等
if nums1[i] == nums2[j]:
res.append(nums1[i]) i+=1 j+=1
elif nums1[i]>nums2[j]:j+=1
else:i+=1

4. 
method1: 暴力递增，i*i >= num
method2: 二分 if mid**2 == num:return True elif mid**2 > num:right = mid-1 else: left = mid+1
method3: num = n*n = 1+3+5+...+(2n-1) (不够优化)

5. 二分 guess(mid) = 0/1/-1

6. hash存储magazine中每个元素出现的次数，遍历ransomNote，hash中次数对应-1
 for j in ransomNote: if hash_.get(j)>0: hash_[j] -= 1
else: return False


Any comment:
hash表真好
