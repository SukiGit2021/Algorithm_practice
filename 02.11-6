1. Degree of an Array (#697)
2. Search in a Binary Search Tree (#700)
3. Kth Largest Element in a Stream (#703)
4. Binary Search(#704)
5. Design HashSet(#705)
6. Design HashMap(#706)





Jane:






Suki:
1. 
logic: get maximum degree
       get num first index and last index
       last - first + 1 is equal to minimum length
       
method1: hash table
for i, num in enumerate(nums):
            if num not in hash_first:
                hash_first[num] = i
                # cover index
            if num in hash_first:
                hash_last[num] = i
        max_freq = max(hash_count.values())
        l = len(nums)
        res = float('inf')
        for num in nums:
            if hash_count[num] == max_freq:
                cur_len = hash_last[num] - hash_first[num] + 1
                res = min(cur_len,res)

method2: 
or num,freq in Counter(nums).most_common():
            # order by frequency descending
            if degree == -1: degree = freq
            if freq != degree:
                return res
            res = min(res,len(nums)-nums[::-1].index(num)-nums.index(num))

2.
method1: iterator, right is greater than root, left is smaller than root
while root:
            if val == root.val:
                return root
            root = root.left if val < root.val else root.right

method2: recursion
if not root: return None
        if val == root.val:
            return root
        return self.searchBST(root.left if val < root.val else root.right,val)

3. use heap stack
heap container to store k length numbers
heap is from low to high
if new number is greater than first number in heaq, remove first number and add new number
if len(self.heap) < self.k:
            heapq.heappush(self.heap,val)
        elif self.heap[0] < val:
            heapq.heapreplace(self.heap,val)
        return self.heap[0]

4.
while left<=right:
            mid = left+(right-left)//2
            if nums[mid] == target:
                return mid
            if nums[mid]>target:
                right = mid -1
            else:
                left += 1

5.
error

6.
error

Comment:
