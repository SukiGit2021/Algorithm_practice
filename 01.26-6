1. Convert a Number to Hexadecimal (#405)
2. Longest Palindrome (#409)
3. Fizz Buzz (#412)
4. Third Maximum Number (#414)
5. Add String (#415)
6. Number of Segments in a String (#434)




Jane:
1.
十进制转化为十六进制：若负数先加2**32再操作。余数为每位上的数。
注意：
hex_nums虽然不会输出0，但是需要0占位
最后输出顺序和添加顺序相反
2.
建立一个set存放出现次数为奇数的char，当char在set中就移除，当char不在set中就加入。最后用len(s)-len(set)+1可以得到最长回文
注意：
这里只需要返回palindrome的最长个数，不需要得到排列
奇数长度也可以对称，所以要+1
3.
对每个数字进行判断
4.
先生成小于k的所有fib_nums,再在内部找min_count
注意：
fib_nums最开始为[0,1]
不用担心最优解的问题，k肯定能表示成fib_nums之和，如果最大的值比k小，肯定会包含在内（因为其他的值的和都可以等于最大值）
5.
num1和num2中短的前面补0，从末尾开始挨个相加,如果flag最后是1，则加在前面，注意倒序输出
6. 
split(),注意"         "的情况



Suki:
1. 2^32转化为16进制，0000为一组，一共八组
range = [1,8]
num%16 
res.append(num%16)
num//=16

2. 
method1: 
Counter 如果是偶数次数的元素一定可以加入回文，如果是奇数次数，%2为1的，奇数作为中心数。
res %2 == 0 and i%2 == 1:
res+=1

method2: dict()
for k,v in dict_.items()
v%2 == 0 or != 0
res+1 if 1 in dict_.values() else res

3. 依次判断条件就行
s = ''
if i%3 == 0:s += 'Fizz'
if i %5 == 0:s+= 'Buzz'
if i%3 !=0 and i%5 !=0:s = str(i)

4. 
method1：
排序后判断不重复元素的个数是否大于2
if len(res)<3: return max(nums)
else: index = len(res) -3 
return res[index]
method2: 倒序
res[2] if len(res)>2 else max(nums)

5.
method1:每个str，倒着相加每个数，逢10进1
method2: 将短的str前面加0
if len(num1)>len(num2):
num2 = '0'*(len(num1) - len(num2))+num2
if len(num1)<len(num2):
num1 = '0'*(len(num2) - len(num1))+num1


6.
method1:
return len(s.split())
method2:
if (i==0 and s[i] !=' ') or (s[i]!= ' ' and s[i-1] == ' '):
res +=1

Any comment:
