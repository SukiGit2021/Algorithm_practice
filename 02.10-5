1. Longest Continuos Increasing Subsequence (#674)
2. Valid Palindrome II (#680)
3. Baseball Game(#682)
4. Binary Number with Alternating Bits (#693)
5. Count Binary Substrings (#696)




Jane:
1.
method1:
双指针i,j，比较j和j-1的大小，以及max和(j-i+1)的大小
method2:
Dynamic Progressing -- Everything can be applied with DP. lol
1)建立一个list -- dp来储存到每个元素为止的max sub num
2)遍历所有nums的元素，如果比前一个元素大，则把dp对应index的值改为前一个值+1
3)输出dp中最大值
2.
双指针从0和len(s)-1出发
当两个element相等，则往中间移动
若不相等，则需要判断是左边还是右边的元素出了问题
在这里可以执行另外一个函数，传入的参数是l+1或者r-1。并且在这个函数里，如果遇到了不等的情况，直接return False，因为最多只能一个element出错。
3.
建立一个nums list，挨个判断
4.
return '00' not in s and '11' not in s
5.
First, I count the number of 1 or 0 grouped consecutively.
For example "0110001111" will be [1, 2, 3, 4].

Second, for any possible substrings with 1 and 0 grouped consecutively, the number of valid substring will be the minimum number of 0 and 1.
For example "0001111", will be min(3, 4) = 3, ("01", "0011", "000111")
PS:
1) replace '01' with '0 1', '10' with '1 0', to separate different numbers
2) zip()




Suki:
1.
method1: nums[i+1]>nums[i]
calculate maximum count
for i in range(len(nums)):
            if i+1 < len(nums) and nums[i+1]>nums[i]:
                count += 1
                max_ = max(count,max_)
            else:
                count = 1
                
method2: dynamic progressing
dp=[1]*l
        for i in range(1,l):
            if nums[i]>nums[i-1]:
                dp[i] = dp[i-1]+1

2.
method1: timeoverdue

        # delete one char and store all possibilities into list
        # iterate all new string in list to check palindrome
        
    def helper(s):
            if s == s[::-1]:
                return True
            return False
        ss = []
        for i in range(len(s)):
            ss.append(s[:i]+s[i+1:])
        for i in ss:
            if helper(i) == True:
                return True
        return False
        
method2: binary search from two boundaries
while low<high:
            if s[low]==s[high]:
                low+=1
                high-=1
            else:
                return hepler(low+1,high) or hepler(low,high-1)

method3: bianry search
        while left<=right:
            if s[left] == s[right]:
                left+=1
                right-=1
            else:
                return helper(s[left+1:right+1]) or helper(s[left:right])

3. 
method1: stack
for i in ops:
            if i == 'C':
                stack.pop()
            elif i == 'D':
                stack.append(int(stack[-1]*2))
            elif i == '+':
                stack.append(int(stack[-1])+int(stack[-2]))
            else:
                stack.append(int(i))

method2: stack, 'C' is pop action.
for i in ops:
            if i !='C':
                stack.append(i)
            else:
                stack.pop()
        for i in range(len(stack)):
            if stack[i] == 'D':
                stack[i] = int(stack[i-1])*2
            elif stack[i] == '+':
                stack[i] = int(stack[i-1])+int(stack[i-2])
        res = [int(i) for i in stack]

4. 
method1: iteration
 max_ = float('-inf')
        for i in range(1,len(res)):
            if res[i] == res[i-1]:
                count += 1
            else:
                count = 0
            max_ = max(count,max_)
            
method2: no 00 and 11
return ('00' not in bin(n)) and ('11' not in bin(n))

method3: 1&0
tmp = n^(n>>1)
        return tmp&(tmp+1) == 0

5. method1: count frequencies
   for i in range(1,len(s)):
            if s[i] == s[i-1]:
                count[count_index] += 1
            else:
                count.append(1)
                count_index+=1
        res = 0
        for j in range(1,len(count)):
            res += min(count[j],count[j-1])

comment:
