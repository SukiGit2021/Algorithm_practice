1. Arranging Coins (#441)
2. Find All Numbers Disappeared in an Array ($448)
3. Minimum Moves to Equal Array Elements (#453)
4. Assign Cookies (#455)
5. Repeated SubString Pattern(#459)
6. Hamming Distance (#461)





Jane:
1.
返回的是最后放满coins的层数index
2.
关键：nums的长度=n
得到原本的list后和set(nums)相减即可
3.
nums中每个数与最小值之差的绝对值之和
4.
排序后双指针比较值的大小，若饼干size不够，指针后移
注意：
sort()默认从小到大排序，sorted()不是
5.
ss=s+s
当两个s连接起来，破坏前后两个substr，中间的值依然能找到之前的s，即符合题意
6.
xy的二进制做XOR
注意：
python中^代表xor，**代表平方
xor后的结果是十进制，需要bin()转换成二进制，计算1的个数



Suki:
1. i = [1:]
n >= i的时候，进入下一层 res +=1
while n>0: if n >= i: n = n - i i += 1 res += 1
else:  return res
method2: 二分 n*(n+1)//2


2. 
method1: 判断是否存在，不存在则添加
for i in range(1,n+1,1):
if i not in set_nums: res.append(i) return res

method2: hash
[1,n]中每个元素在hash中值为0，遍历nums，如果遇到元素则+1，最后检查hash中值为0的数


3.找到最小值，每个数与最小值之间的差异和就是要完成的步骤
res += num - min_

4. 排序后检查g[i]是否小于s[j]
小于则满足胃口，大于则往后取更大的饼干
while i< len(g) and j< len(s):
if g[i] > s[j]:j += 1
else:
res += 1
i += 1
j += 1

5. 
method1:滑动：
s = 'abc'
s+s = 'abcabc'
'cabcab' - 'bcabca' - 'abcabc
s in (s+s)[1:-1]

method2: 
长度大于1的s
取公共区间，区间*（总长度/区间长度）会等于原s
res*(len(s)//n) == s

6. 
method1:
异或 bin(x^y).count('1')

method2: 转化为32位2进制str，比较每一位是否相同
bx,by = bin(x)[2:].zfill(32),bin(y)[2:].zfill(32)
if bx[i] != by[i]: res+=1

method3: 一直除以2直到不能除
if x%2 != y%2: res +=1
x //=2 y //=2


Comment:
