1. Contains Duplicate II (#219)
2. Implement Stack Using queues (#225)
3. Invert Binary Tree (#226)
4. Summary Range (#228)
5. Power of Two (#231)
6. Implement Queue Using Stacks (#232)



Jane:
1. 
dict{key：数字，value：出现的上一次index}
如果val在dict的key里，判断与对应的value之差是否<=k
否则把dict[val]等于最新的index
2. 
1) Python里的queque用deque()，可以用append(), appendleft(), pop(), popleft()
2) 在push()里，stack是先进先出，但是实际用的queue是先进后出。为了让push进来的元素最先出去，需要把它放到queue的最前端，因此需要创建一个新的queue。
3.
1) 递归地把root.left = self.invertTree(root.right)
2)
正确写法
root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
错误写法（这样有先后顺序）
root.left = self.invertTree(root.right)
root.right = self.invertTree(root.left)
4.





Suki:
1. method1：双循环（在这里超时了） method2: hash表，键为数字，值为index，判断数字是否出现第二次，index相减绝对值是否<=k。
nums[i] in container and abs(container[nums[i]]-i)<=k

2. queue1为主，queue2为辅助, 当que1有元素的时候，将新元素放进que2再将que1的元素移动到que2，对换q1和q2.
while len(self.q1)>0:
      self.q2.append(self.q1.popleft())
self.q1,self.q2 = self.q2,self.q1

3. 递归遍历左右节点，对换左右节点 root.left,root.right = root.right,root.left

4.  res.append(str(nums[start])+'->'+ str(nums[i - 1]))

5. 
method1:  contaienr = [2**i for i in range(32)]
method2: while (n%2 ==0):n/=2 判断最后n是否为1
method3: return n&(n-1) == 0  0010&0001

6. push进stack1，pop的时候将stack1的push到stack2，完成顺序反转


Any comment:
