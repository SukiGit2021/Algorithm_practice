
1. Same Tree (#100)
2. Symmetric Tree (#101)
3. Maximum depth of binary tree (#104)
4. Convert sorted Array to Binary tree (#108)
5. Balanced Binary Tree (#110)

Jane:
1. Recursively compare p.val, p.left and p.right
2. Recursively compare left.left ? right.right, and left.right ? right.left. If one of them are not equal, return False.
3. 递归调用函数自己，返回左右节点中最大的一个+1
4. Binary Search Tree: 左小右大
   递归调用，root为当前list中间的元素mid，root.left为mid左边的list，root.right为mid右边的list
5. Balanced Binary Tree:
   A binary tree in which the left and right subtrees of every node differ in height by no more than 1.
   

Suki: 3/5
1. 检查两个tree的node数量是否相同，若相同则比较每个节点是否相同
2. 检查root的左右节点是否相同，镜面递归
3. 计算每个root的左节点深度和右节点深度，大的那一个+节点本身就是最大深度
4. 取中间节点为root，左区间为左节点，右区间为右节点
5. left的深度-right的深度 绝对值不大于2

Any comment?
